function okay = SiL_modify_project_make_variables_cpp_file(proj_name ...
                ,sim_def_var_inp,sim_def_var_out,sim_def_n_var_inp,sim_def_n_var_out ...
                ,variables_cpp_file,sim_def_h_file,code_kennung_start,code_kennung_end)
% proj_name           Projekt-Name
% sim_def_var_inp     Variablendefinitiondstruktur Input (siehe SiL_modify_project.m)
% sim_def_var_out     Variablendefinitiondstruktur Output (siehe SiL_modify_project.m)
% sim_def_n_var_inp   Anzahl Input
% sim_def_n_var_out   Anzahl Output
% variables_cpp_file  vollständiger Name mit Verzeichnis von variables.cpp
% sim_def_h_file      vollständiger Name mit Verzeichnis von Simulationsvariablen definition
% code_kennung_start  Zeichen für Start automatische Codegenerierung
% code_kennung_end    Zeichen für Ende automatische Codegenerierung

  okay = 1;
  s_file = str_get_pfe_f(sim_def_h_file);
  [ch,cinc,cci,cgi,cvi,cco,cgo,cvo,ck] = SiL_get_variables_c;
  ncliste = 0;
  cliste  = {};
  if( exist(variables_cpp_file,'file') )
    [ okay,c,nzeilen ] = read_ascii_file(variables_cpp_file);
    if( okay && ~isempty(c) )
      iliste0 = cell_find_f(c,code_kennung_start,'n');
      iliste1 = cell_find_f(c,code_kennung_end,'n');
      nliste  = length(iliste0);
      for i = 1:nliste
        iliste0 = cell_find_f(c,code_kennung_start,'n');
        if( ~isempty(iliste0) )
          iliste1 = cell_find_f(c,code_kennung_end,'n');
          i0 = iliste0(1);
          for j = 1:length(iliste1)
            i1 = iliste1(j);
            if( i1 >= i0 )
              ncliste = ncliste + 1;
              c  = cell_delete(c,i0,i1);
              cliste{ncliste} = max(1,i0-1);
              break;
            end
          end
        end
      end
    end
  end
  
  if( ncliste )
    ic0      = cliste{1};
    [c,nadd] = SiL_modify_project_make_variables_cpp_file_add_inc ...
               (c,ic0,cinc,ck ...
               ,code_kennung_start,code_kennung_end,[s_file.name,'.',s_file.ext]);
    for i=1:ncliste
      cliste{i} = cliste{i}+nadd;
    end
    if( ncliste < 2 )
      ic0 = cliste{1};
    else
      ic0 = cliste{2};
    end
    if( sim_def_n_var_inp > 0 )
      [c,nadd] = SiL_modify_project_make_variables_cpp_file_add_var ...
                 (c,ic0,ck,cgi,cvi ...
                 ,code_kennung_start,code_kennung_end,proj_name,sim_def_var_inp);

      for i=1:ncliste
        cliste{i} = cliste{i}+nadd;
      end
      if( ncliste < 2 )
        ic0 = cliste{1};
      elseif( ncliste < 3 )
        ic0 = cliste{2};
      else
        ic0 = cliste{3};
      end
    end
    if( sim_def_n_var_out > 0 )
      [c,nadd] = SiL_modify_project_make_variables_cpp_file_add_var( ...
                 c,ic0,ck,cgo,cvo,code_kennung_start,code_kennung_end,proj_name,sim_def_var_out);
    end
  else    
    % Alles neu erstellen
    %  Header
    c = cell_change(ch,'$$PROJNAME$$',proj_name);
    % Include
    [c,nadd] = SiL_modify_project_make_variables_cpp_file_add_inc ...
               (c,length(c),cinc,ck ...
               ,code_kennung_start,code_kennung_end,[s_file.name,'.',s_file.ext]);
    c = cell_add(c,cci); % Kommentar
    % Inputvariable
    if( sim_def_n_var_inp > 0 )
      [c,nadd] = SiL_modify_project_make_variables_cpp_file_add_var( ...
                 c,length(c),ck,cgi,cvi,code_kennung_start,code_kennung_end,proj_name,sim_def_var_inp);
      c = cell_add(c,cco); % Kommentar
    end
    if( sim_def_n_var_out > 0 )
      [c,nadd] = SiL_modify_project_make_variables_cpp_file_add_var( ...
                 c,length(c),ck,cgo,cvo,code_kennung_start,code_kennung_end,proj_name,sim_def_var_out);  
    end
  end
  okay = write_ascii_file(variables_cpp_file,c);
end
function [c,nadd] = SiL_modify_project_make_variables_cpp_file_add_inc(c,ic0,cinc,ck,kennung_start,kennung_end,incfilename)
  nadd = 0;
  % Kennung STart KENNSTART
  ckenn = cell_change(ck,'$$KENNUNG$$',kennung_start);
  n     = length(ckenn);
  c     = cell_insert(c,ic0,ckenn);
  ic0   = ic0 + n;
  nadd  = nadd + n;
  % Input Gruppe
  cinc = cell_change(cinc,'$$INCLUDEFILE$$',incfilename);
  n     = length(cinc);
  c     = cell_insert(c,ic0,cinc);
  ic0   = ic0 + n;
  nadd  = nadd + n;
  
  % Kennung End KENNUNG
  ckenn = cell_change(ck,'$$KENNUNG$$',kennung_end);
  n     = length(ckenn);
  c     = cell_insert(c,ic0,ckenn);
  ic0   = ic0 + n;
  nadd  = nadd + n;
end

function [c,nadd] = SiL_modify_project_make_variables_cpp_file_add_var(c,ic0,ck,cgrup,cvar,kennung_start,kennung_end,proj_name,s)
  nadd = 0;
  % Kennung STart KENNSTART
  ckenn = cell_change(ck,'$$KENNUNG$$',kennung_start);
  n     = length(ckenn);
  c     = cell_insert(c,ic0,ckenn);
  ic0   = ic0 + n;
  nadd  = nadd + n;
  % Input Gruppe
  cgrup = cell_change(cgrup,'$$PROJNAME$$',proj_name);
  n     = length(cgrup);
  c     = cell_insert(c,ic0,cgrup);
  ic0   = ic0 + n;
  nadd  = nadd + n;
  
  m = length(s);
  for i=1:m
    cvar1 = cell_change(cvar,'$$SIMNAME$$',s(i).name);
    cvar1 = cell_change(cvar1,'$$CVARIABLE$$',s(i).cname);
    cvar1 = cell_change(cvar1,'$$SIMUNIT$$',s(i).unit);
    cvar1 = cell_change(cvar1,'$$COMMENT$$',s(i).comment);
    n     = length(cvar1);
    c     = cell_insert(c,ic0,cvar1);
    ic0   = ic0 + n;
    nadd  = nadd + n;
  end
  % Kennung End KENNUNG
  ckenn = cell_change(ck,'$$KENNUNG$$',kennung_end);
  n     = length(ckenn);
  c     = cell_insert(c,ic0,ckenn);
  ic0   = ic0 + n;
  nadd  = nadd + n;
end
function [ch,cinc,cci,cgi,cvi,cco,cgo,cvo,ck] = SiL_get_variables_c
%
% ch Header mit include $$PROJNAME$$
% cinc Includefile $$INCLUDEFILE$$
% cci Comment-Block Input
% cgi Input Groupdefinition change $$PROJNAME$$
% cvi Input Variabledefinition change $$SIMNAME$$, $$CVARIABLE$$, $$SIMUNIT$$,$$COMMENT$$
% cco Comment-Block Output
% cpo Output Groupdefinition change $$PROJNAME$$
% cvo Output Variabledefinition change $$SIMNAME$$, $$CVARIABLE$$, $$SIMUNIT$$,$$COMMENT$$
% ck Kennung $$KENNUNG$$

  ch = ...
  {'////////////////////////////////////////////////////////////////////////////////////////////////' ...
  ,'//                                                                                            //' ...
  ,'//                                task variable interface file                                //' ...
  ,'//                                                                                            //' ...
  ,'////////////////////////////////////////////////////////////////////////////////////////////////' ...
  ,'//                                                                                            //' ...
  ,'//            contains user module frame input and output variables (see comments)            //' ...
  ,'//                                                                                            //' ...
  ,'////////////////////////////////////////////////////////////////////////////////////////////////' ...
  ,'//                                generated by wxWavE                                         //' ...
  ,'////////////////////////////////////////////////////////////////////////////////////////////////' ...
  ,'' ...
  ,'/* wave library header file           */' ...
  ,'#include "wave.h"' ...
  ,'#include "wave_ext.h"' ...
  ,'' ...
  ,'extern "C"' ...
  ,'{' ...
  ,'/* include user c header files here   */' ...
  ,'#include "wave_$$PROJNAME$$.h"' ...
  ,'}' ...
  ,'' ...
  };
  cinc = ...
  {'#include "$$INCLUDEFILE$$"' ...
  };
  cci = ...
  {'' ...
  ,'////////////////////////////////////////////////////////////////////////////////////////////////' ...
  ,'//                                I N P U T  V A R S' ...
  ,'////////////////////////////////////////////////////////////////////////////////////////////////' ...
  ,'//' ...
  ,'// Use the following table to define your input variables. Additional informations you can define' ...
  ,'// or overwrite with external frame files:' ...
  ,'//' ...
  ,'// $$NAME$$.inf      - unit and comment' ...
  ,'// $$NAME$$.pdf/par  - initial values' ...
  ,'// $$NAME$$.inp      - variable name remapping, scale, offset' ...
  ,'//' ...
  ,'//' ...
  ,'// There are 4 macros to define an input single variable:' ...
  ,'// ------------------------------------------------------' ...
  ,'//' ...
  ,'// short;     iVs(  "VarName", &VarAdress)' ...
  ,'// medium;    iVm(  "VarName", &VarAdress, "VarGroup", "VarUnit", "VarComment")' ...
  ,'// extended;  iVx(  "VarName", &VarAdress, "VarGroup", "VarUnit", "VarComment", Scale, Offset)' ...
  ,'// extended;  iVxi( "VarName", &VarAdress, "VarGroup", "VarUnit", "VarComment", Scale, Offset, InitValue)' ...
  ,'//' ...
  ,'// There are 4 macros to define an input array variable:' ...
  ,'// -----------------------------------------------------' ...
  ,'//' ...
  ,'// short;     iVAs(  "VarName", VarAdress, ArrayLength)' ...
  ,'// medium;    iVAm(  "VarName", VarAdress, ArrayLength, "VarGroup", "VarUnit", "VarComment")' ...
  ,'// extended;  iVAx(  "VarName", VarAdress, ArrayLength, "VarGroup", "VarUnit", "VarComment", Scale, Offset)' ...
  ,'// extended;  iVAxi( "VarName", VarAdress, ArrayLength, "VarGroup", "VarUnit", "VarComment", Scale, Offset, InitValue)' ...
  ,'//' ...
  ,'//' ...
  ,'////////////////////////////////////////////////////////////////////////////////////////////////' ...
  ,'' ...
  };
  cgi = ...
  {'#define VarInpGroup "$$PROJNAME$$_Inputs"' ...
  ,'' ...
  ,'/*    variable name,        adress of c code variable,   group,           unit,  comment,             scale,  offset,  init */' ...
  };
  cvi = ...
  {' iVm( "$$SIMNAME$$",          &$$CVARIABLE$$,              VarInpGroup,     "$$SIMUNIT$$",   "$$COMMENT$$")' ...
  };
  cco = ...
  {'////////////////////////////////////////////////////////////////////////////////////////////////' ...
  ,'//                                O U T P U T  V A R S' ...
  ,'////////////////////////////////////////////////////////////////////////////////////////////////' ...
  ,'//' ...
  ,'// Use the following table to define your output variables. Additional informations you can define' ...
  ,'// or overwrite with external frame files:' ...
  ,'//' ...
  ,'// $$NAME$$.inf      - unit and comment' ...
  ,'// $$NAME$$.pdf/par  - initial values' ...
  ,'// $$NAME$$.out      - variable name remapping, scale, offset' ...
  ,'//' ...
  ,'//' ...
  ,'// There are 4 macros to define an output single variable:' ...
  ,'// -------------------------------------------------------' ...
  ,'//' ...
  ,'// short;     oVs(  "VarName", &VarAdress)' ...
  ,'// medium;    oVm(  "VarName", &VarAdress, "VarGroup", "VarUnit", "VarComment")' ...
  ,'// extended;  oVx(  "VarName", &VarAdress, "VarGroup", "VarUnit", "VarComment", Scale, Offset)' ...
  ,'// extended;  oVxi( "VarName", &VarAdress, "VarGroup", "VarUnit", "VarComment", Scale, Offset, InitValue)' ...
  ,'//' ...
  ,'// There are 4 macros to define an output array variable:' ...
  ,'// ------------------------------------------------------' ...
  ,'//' ...
  ,'// short;     oVAs(  "VarName", VarAdress, ArrayLength)' ...
  ,'// medium;    oVAm(  "VarName", VarAdress, ArrayLength, "VarGroup", "VarUnit", "VarComment")' ...
  ,'// extended;  oVAx(  "VarName", VarAdress, ArrayLength, "VarGroup", "VarUnit", "VarComment", Scale, Offset)' ...
  ,'// extended;  oVAxi( "VarName", VarAdress, ArrayLength, "VarGroup", "VarUnit", "VarComment", Scale, Offset, InitValue)' ...
  ,'//' ...
  ,'//' ...
  ,'////////////////////////////////////////////////////////////////////////////////////////////////' ...
  ,'' ...
  };
  cgo = ...
  {'#define VarOutGroup "$$PROJNAME$$_Outputs"' ...
  ,'' ...
  ,'/*    variable name,        adress of c code variable,   group,           unit,  comment,             scale,  offset,  init */' ...
  };
  cvo = ...
  {' oVm( "$$SIMNAME$$",          &$$CVARIABLE$$,              VarOutGroup,     "$$SIMUNIT$$",   "$$COMMENT$$")' ...
  };  
  ck = ...
  {'/* $$KENNUNG$$ ---------------------------------------------------------------------------------*/' ...
  };
end
