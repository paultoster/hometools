
function okay = build_rtas_mex(root_dir,flag)
%
%  okay = build_rtas_mex(root_dir,flag)
%
%  Erstellt ein mex-Verzeichnis mit allen notwendigen Dateien um 
%  das rtas für mex-Files zu benutzen. Dazu muß eine rtas-simulink-Version
%  erstellt werden, die dann als Vorlage dient
%
%  root_dir         Das root-Verzeichnis um das rtas-Projekt auszuwählen,
%                   wenn nicht vorhanden, wird D\: verwendet
%  flag             = 1 root_dir ist das Modulverzeichnis
%
% VCLIB_NAME = 'vc9lib';  müssen unterumständen angepasst werden
% VC_EXT     = 'vcproj';

r.VCLIB_NAME = 'vc9lib';
r.VC_EXT     = 'vcproj';
r.DLLEXT     = '.mexw32';

s_file = str_get_pfe_f(mfilename('fullpath'));
r.mex_fr_c_txt_file = fullfile(s_file.dir,'build_rtas_mex_fr_c.txt');

  % check root dir
  if( ~exist('root_dir','var') )
    root_dir = 'd:\';
    if( ~exist(root_dir,'dir') )
      [c_names,icount] = str_split(pwd,':');
      root_dir = [c_names{1},':\'];
    end
  end
  if( ~exist('flag','var') )
    flag = 0;
  end
  if( flag && ~exist(root_dir,'dir') )
    flag = 0;
    warning('root_dir ist nicht vorhanden');
  end

  if( ~flag )
    % Projekt auswählen:
    %-------------------
    s_frage.comment   = 'rtas-Verzeichnis mit dem Modul auswählen';
    s_frage.start_dir = root_dir;
    [okay,c_dirname]  = o_abfragen_dir_f(s_frage);

    if( ~okay )
      error('Abruch in o_abfragen_dir()');
    end
    [c_names,n]  = str_split(c_dirname{1},'\');
    r.modul_dir  = c_dirname{1};
    r.modul_name = c_names{n};
  else
    [c_names,n]  = str_split(root_dir,'\');
    r.modul_dir  = root_dir;
    r.modul_name = c_names{n};

  end
    
  fprintf('Modulname:             %s\n',r.modul_name);

  % Simulink-dirs
  %-------------------
  r.modul_bin_simulink_dir = fullfile(r.modul_dir,'bin\simulink');
  if( ~exist(r.modul_bin_simulink_dir,'dir') )
    error('Das Verzeichnis <%s> konnte nicht gefunden werden',r.modul_bin_simulink_dir);
  end
  r.modul_mak_simulink_dir = fullfile(r.modul_dir,'mak\simulink');
  if( ~exist(r.modul_mak_simulink_dir,'dir') )
    error('Das Verzeichnis <%s> konnte nicht gefunden werden',r.modul_mak_simulink_dir);
  end
  
  r.modul_src_simulink_dir = fullfile(r.modul_dir,'src\frames\simulink');
  if( ~exist(r.modul_src_simulink_dir,'dir') )
    error('Das Verzeichnis <%s> konnte nicht gefunden werden',r.modul_src_simulink_dir);
  end

  % Simulink-dll und vcproj-File, um zu prüfen, ob erstellt
  r.modul_simulink_dll = fullfile(r.modul_bin_simulink_dir,['sfunc_',r.modul_name,'.mexw32']);
  if( ~exist(r.modul_simulink_dll,'file') )
    error('Die Datei <%s> konnte nicht gefunden werden (Muss erstellt sein um IO zu kopieren)',r.modul_simulink_dll);
  end

  r.modul_simulink_vcproj_file = fullfile(r.modul_mak_simulink_dir,[r.modul_name,'.',r.VC_EXT]);
  if( ~exist(r.modul_simulink_vcproj_file,'file') )
    error('Die Datei <%s> konnte nicht gefunden werden (Muss erstellt sein um projekt zu kopieren)',r.modul_simulink_vcproj_file);
  end

  % mex-Path erstellen
  r.modul_bin_mex_dir = fullfile(r.modul_dir,'bin\mex');
  if( ~exist(r.modul_bin_mex_dir,'dir') )
    [s, mess, messid] = mkdir(r.modul_bin_mex_dir);
    if( s == 0 )
      error(mess);
    end
  end

  r.modul_bin_d_mex_dir = fullfile(r.modul_dir,'bin\mex\debug');
  if( ~exist(r.modul_bin_d_mex_dir,'dir') )
    [s, mess, messid] = mkdir(r.modul_bin_d_mex_dir);
    if( s == 0 )
      error(mess);
    end
  end
  
  r.modul_src_mex_dir = fullfile(r.modul_dir,'src\frames\mex');
  if( ~exist(r.modul_src_mex_dir,'dir') )
    [s, mess, messid] = mkdir(r.modul_src_mex_dir);
    if( s == 0 )
      error(mess);
    end
  end
  
  r.modul_mak_mex_dir = fullfile(r.modul_dir,'mak\mex');
  if( ~exist(r.modul_mak_mex_dir,'dir') )
    [s, mess, messid] = mkdir(r.modul_mak_mex_dir);
    if( s == 0 )
      error(mess);
    end
  end
  
  % Input-File
  r.modul_simulink_input_file = fullfile(r.modul_bin_simulink_dir,[r.modul_name,'.inp']);
  if( exist(r.modul_simulink_input_file,'file') ), r.modul_has_input = 1;
  else                                             r.modul_has_input = 0;
  end
  
  r.modul_mex_input_file      = fullfile(r.modul_bin_mex_dir,[r.modul_name,'.inp']);
  if( exist(r.modul_mex_input_file,'file') ), delete(r.modul_mex_input_file); end
  
  if( r.modul_has_input )
    [okay,message] = copy_file_if_newer(r.modul_simulink_input_file,r.modul_mex_input_file);
    if( ~okay )
      fprintf('Die Datei <%s> konnte nicht zu <%s> kopiert werden\n',r.modul_simulink_input_file,r.modul_mex_input_file )
      error(message);
    end
    fprintf('Input-File (release):  %s erstellt\n',r.modul_mex_input_file)
  end

  r.modul_mex_d_input_file      = fullfile(r.modul_bin_d_mex_dir,[r.modul_name,'.inp']);
  if( exist(r.modul_mex_d_input_file,'file') ), delete(r.modul_mex_d_input_file); end
  
  if( r.modul_has_input )
    [okay,message] = copy_file_if_newer(r.modul_simulink_input_file,r.modul_mex_d_input_file);
    if( ~okay )
      fprintf('Die Datei <%s> konnte nicht zu <%s> kopiert werden\n',r.modul_simulink_input_file,r.modul_mex_d_input_file )
      error(message);
    end
    fprintf('Input-File (debug):  %s erstellt\n',r.modul_mex_d_input_file)
  end

  % Output-File
  r.modul_simulink_output_file = fullfile(r.modul_bin_simulink_dir,[r.modul_name,'.out']);
  if( exist(r.modul_simulink_output_file,'file') ), r.modul_has_output = 1;
  else                                              r.modul_has_output = 0;
  end
  
  r.modul_mex_output_file      = fullfile(r.modul_bin_mex_dir,[r.modul_name,'.out']);
  if( exist(r.modul_mex_output_file,'file') ), delete(r.modul_mex_output_file); end
  
  if( r.modul_has_output )
    [okay,message] = copy_file_if_newer(r.modul_simulink_output_file,r.modul_mex_output_file);
    if( ~okay )
      fprintf('Die Datei <%s> konnte nicht zu <%s> kopiert werden\n',r.modul_simulink_output_file,r.modul_mex_output_file );
      error(message);
    end
    fprintf('Output-File (release):  %s erstellt\n',r.modul_mex_output_file)
  end

  r.modul_mex_d_output_file      = fullfile(r.modul_bin_d_mex_dir,[r.modul_name,'.out']);
  if( exist(r.modul_mex_d_output_file,'file') ), delete(r.modul_mex_d_output_file); end
  
  if( r.modul_has_output )
    [okay,message] = copy_file_if_newer(r.modul_simulink_output_file,r.modul_mex_d_output_file);
    if( ~okay )
      fprintf('Die Datei <%s> konnte nicht zu <%s> kopiert werden\n',r.modul_simulink_output_file,r.modul_mex_d_output_file );
      error(message);
    end
    fprintf('Output-File (debug):  %s erstellt\n',r.modul_mex_d_output_file)
  end
  
  % Param-File
  r.modul_simulink_param_file = fullfile(r.modul_bin_simulink_dir,[r.modul_name,'.pdf']);
  if( exist(r.modul_simulink_param_file,'file') ), r.modul_has_param = 1;
  else                                             r.modul_has_param = 0;
  end

  r.modul_mex_param_file      = fullfile(r.modul_bin_mex_dir,[r.modul_name,'.pdf']);
  if( exist(r.modul_mex_param_file,'file') ), delete(r.modul_mex_param_file); end
  
  if( r.modul_has_param )
    [okay,message] = copy_file_if_newer(r.modul_simulink_param_file,r.modul_mex_param_file);
    if( ~okay )
      fprintf('Die Datei <%s> konnte nicht zu <%s> kopiert werden\n',r.modul_simulink_param_file,r.modul_mex_param_file );
      error(message);
    end
    fprintf('Param-File (release):  %s erstellt\n',r.modul_mex_param_file)
  end
  
  r.modul_mex_d_param_file      = fullfile(r.modul_bin_d_mex_dir,[r.modul_name,'.pdf']);
  if( exist(r.modul_mex_d_param_file,'file') ), delete(r.modul_mex_d_param_file); end
  
  if( r.modul_has_param )
    [okay,message] = copy_file_if_newer(r.modul_simulink_param_file,r.modul_mex_d_param_file);
    if( ~okay )
      fprintf('Die Datei <%s> konnte nicht zu <%s> kopiert werden\n',r.modul_simulink_param_file,r.modul_mex_d_param_file );
      error(message);
    end
    fprintf('Param-File (debug):  %s erstellt\n',r.modul_mex_d_param_file)
  end
  
  % vc-project-file
  r.modul_mex_vcproj_file = fullfile(r.modul_mak_mex_dir,[r.modul_name,'.',r.VC_EXT]);
  if( exist(r.modul_mex_vcproj_file,'file') ), delete(r.modul_mex_vcproj_file); end

  % c Files
  r.modul_simulink_frame_c_file  = fullfile(r.modul_src_simulink_dir,['sfunc_',r.modul_name,'_frame.c']);
  if( ~exist(r.modul_simulink_frame_c_file,'file') )
    error('Die Datei <%s> konnte nicht gefunden werden (Muss erstellt sein um frame-functions zu kopieren)', r.modul_simulink_frame_c_file);
  end
  
  r.modul_mex_frame_c_file  = fullfile(r.modul_src_mex_dir,['mex_',r.modul_name,'_frame.c']);
  if( exist(r.modul_mex_frame_c_file,'file') ), delete(r.modul_mex_frame_c_file); end

  r.modul_mex_fr_c_file      = fullfile(r.modul_src_mex_dir,['mex_',r.modul_name,'.c']);
  if( exist(r.modul_mex_fr_c_file,'file') ), delete(r.modul_mex_fr_c_file); end

  r.modul_simulink_pvf_c_file  = fullfile(r.modul_src_simulink_dir,['sfunc_',r.modul_name,'_pvf.c']);
  if( ~exist(r.modul_simulink_pvf_c_file,'file') )
    error('Die Datei <%s> konnte nicht gefunden werden (Muss erstellt sein um frame-functions zu kopieren)', r.modul_simulink_pvf_c_file);
  end

  r.modul_mex_pvf_c_file  = fullfile(r.modul_src_mex_dir,['mex_',r.modul_name,'_pvf.c']);
  if( exist(r.modul_mex_pvf_c_file,'file') ), delete(r.modul_mex_pvf_c_file); end

  % m-Files
  r.modul_m_file = fullfile(r.modul_bin_mex_dir,[r.modul_name,'.m']);
  if( exist(r.modul_m_file,'file') ), delete(r.modul_m_file); end
    
  r.modul_d_m_file = fullfile(r.modul_bin_d_mex_dir,[r.modul_name,'.m']);
  if( exist(r.modul_d_m_file,'file') ), delete(r.modul_d_m_file); end
  
  
  % Schreibe c-File
  build_mex_fr_c(r);
  build_mex_frame_pvf(r);
  build_mex_vcproj(r);
  
  % m-File zur Steuerung Release
  [okay,mess] = build_rtas_mex_m_file(r.modul_name,r.modul_mex_input_file,r.modul_mex_output_file,r.modul_m_file,r.DLLEXT);
  if( ~okay )
    error(mess);
  end
  fprintf('m-File (release):      %s erstellt\n', r.modul_m_file);
  
  % m-File zur Steuerung Debug
  [okay,mess] = build_rtas_mex_m_file(r.modul_name,r.modul_mex_d_input_file,r.modul_mex_d_output_file,r.modul_d_m_file,r.DLLEXT);
  if( ~okay )
    error(mess);
  end
  fprintf('m-File (debug):        %s erstellt\n',r.modul_d_m_file);

end
function build_mex_fr_c(r)
%   [okay,c_lines,nzeilen] = read_ascii_file(r.mex_fr_c_txt_file);
%   if( ~okay )
%     error('Die Textdatei mit c-Code: <%s> konnte nicht gelesen werden',r.mex_fr_c_txt_file);
%   end
%   for j=1:nzeilen
%     fprintf(',''%s'' ...\n',c_lines{j});
%   end

  c_lines = build_rtas_mex_c_file_text;
  
  c_lines = str_change_f(c_lines,'$$MOD_NAME$$',r.modul_name,'a');

  okay = write_ascii_file(r.modul_mex_fr_c_file,c_lines);
  if( ~okay )
    error('Fehler bei Schreiben von c-Code in: <%s>',r.modul_mex_fr_c_file);
  end
  fprintf('mex-c-File:            %s erstellt\n',r.modul_mex_fr_c_file);
end
function build_mex_frame_pvf(r)

  [okay,mess] = change_text_in_new_file(r.modul_simulink_frame_c_file,r.modul_mex_frame_c_file,'sfunc','mex');
  if( ~okay )
    error(mess);
  end

  fprintf('mex-frame-c-File:      %s erstellt\n',r.modul_mex_frame_c_file);

  [okay,mess] = change_text_in_new_file(r.modul_simulink_pvf_c_file,r.modul_mex_pvf_c_file,'sfunc','mex');
  if( ~okay )
    error(mess);
  end

  fprintf('mex-pvf-c-File:      %s erstellt\n',r.modul_mex_pvf_c_file);
end
function build_mex_vcproj(r)

  liste_such   = {'sfunc','bin\simulink','bin/simulink','obj\simulink','obj/simulink','frames\simulink','frames/simulink'};
  liste_ersetz = {'mex',  'bin\mex','bin/mex','obj\mex','obj/mex','frames\mex','frames/mex'};

  [okay,mess] = change_text_in_new_file(r.modul_simulink_vcproj_file, r.modul_mex_vcproj_file,liste_such,liste_ersetz);
  if( ~okay )
    error(mess);
  end
  fprintf('mex-vcproj-File:       %s erstellt\n',r.modul_mex_vcproj_file);
end
function [okay,mess] = build_rtas_mex_m_file(modul_name,input_file,output_file,m_file,DLLEXT)
  okay = 1;
  mess = '';
  
  % Input-File lesen
  %-----------------
  if( ~exist(input_file,'file') )
    mess = sprintf('Inputdatei: <%s> kann nicht gefunden werden', input_file);
    okay = 0;
    return
  end
  [okay,inp_liste,mess] = read_rtas_io_file(input_file);
  if( ~okay )
    return;
  end
    
  % Output-File lesen
  %-----------------
  if( ~exist(output_file,'file') )
    mess = sprintf('Outputdatei: <%s> kann nicht gefunden werden', output_file);
    okay = 0;
    return
  end
  [okay,out_liste,mess] = read_rtas_io_file(output_file);
  if( ~okay )
    return;
  end
  
  [okay,mess] = build_rtas_mex_m_file_create(inp_liste, out_liste, modul_name, m_file,DLLEXT);
  if( ~okay ),return;end
    
end
function [okay,mess] = build_rtas_mex_m_file_create(inp_liste, out_liste, modul_name, m_file,DLLEXT)

  okay = 1;
  mess = '';

  SET_OUTPUT_STRUCT_NAME = {'  d.(''$VARNAME$'') = zeros(info.n,1);'};
  CHECK_INPUT = {'  if( ~$NAME$_name_in_struct(d,''$VARNAME$'') )' ...
  ,'    error(''$NAME$_name_in_struct_error: %s is not in structure'',''$VARNAME$'');' ...
  ,'  end'};
  CHECK_PARAM = {'  if( ~$NAME$_name_in_struct(d,''$PARNAME$'') )' ...
  ,'    d.$PARNAME$    = zeros(info.n,1);' ...
  ,'    d.$PARSETNAME$ = zeros(info.n,1);' ...
  ,'  end'};
  SET_INIT_INPUT = {'  $SNAME$_input.(''$VARNAME_I$'') = d.(''$VARNAME_E$'')(info.index);'};
  SET_INPUT = {'  $SNAME$_input.(''$VARNAME_I$'') = d.(''$VARNAME_E$'')(info.index);'};
  SET_OUTPUT = {'  d.(''$VARNAME$'')(info.index) = $SNAME$_output.(''$VARNAME$'');'};
  CHECK_NAME_OF_STRUCT_FUNC = {'function flag = $NAME$_name_in_struct(d,name)' ...
  ,'%' ...
  ,'% flag = $NAME$_name_in_struct(d,name)' ...
  ,'% search for struct-name' ...
  ,'% flag = 1 if found' ...
  ,'%' ...
  ,'flag = 0;' ...
  ,'if( isstruct(d) )' ...
  ,'    c_names = fieldnames(d);' ...
  ,'    for i=1:length(c_names)' ...
  ,' ' ...
  ,'        if( strcmp(c_names{i},name) )' ...
  ,'          if( ~isempty(d.(name)) )' ...
  ,'            flag = 1;' ...
  ,'          end' ...
  ,'          return' ...
  ,'        end' ...
  ,'    end' ...
  ,'end' ...
  };
  EXAMPLE_MFILE = ...
  {'info         = [];' ...
  ,'info.n       = 100;' ...
  ,'info.delta_t = 0.01;' ...
  ,' ' ...
  ,'% set input (but normaly comes from measurement or function' ...
  ,'%----------' ...
  ,'d = [];' ...
  ,'$SET_INPUT_STRUCT_NAMES$' ...
  ,' ' ...
  ,'% init' ...
  ,'%-----' ...
  ,'info.index = 1;' ...
  ,'d = $NAME$(''i'',d,info);' ...
  ,' ' ...
  ,'for i=2:info.n' ...
  ,'  % loop' ...
  ,'  %-----' ...
  ,'  info.index = i;' ...
  ,'  d = $NAME$(''l'',d,info);' ...
  ,'end' ...
  ,' ' ...
  ,'% done' ...
  ,'%-----' ...
  ,'$NAME$(''d'',d,info);' ...
  ,' ' ...
  };
  SET_INPUT_STRUCT_NAME = {'d.(''$VARNAME$'') = zeros(info.n,1);'};

  n_out = length(out_liste);
  n_inp = length(inp_liste);
  
  c = build_rtas_mes_text_MFILE;

  % Erstellen des Outputvektors
  c1 = {};
  for i=1:n_out
    o  = out_liste{i};
    c2 = SET_OUTPUT_STRUCT_NAME;
    c2 = cell_change(c2,'$VARNAME$',o{1});
    c1 = cell_add(c1,c2);
  end
  c = cell_change(c,'$SET_OUTPUT_STRUCT_NAMES$',c1);

  % Check Input
  c1 = {};
  for i=1:n_inp
    inp = inp_liste{i};
    name_intern = inp{1};
    if( length(inp) > 1 && isnan(str_get_vec(inp{2})) )
      name_extern = inp{2};
    else
      name_extern = inp{1};
    end
    % Parameter suchen
    if( str_find_f(name_extern,'P_') == 1 )
        c2 = CHECK_PARAM;
        c2 = cell_change(c2,'$NAME$',modul_name);
        c2 = cell_change(c2,'$PARNAME$',name_extern);
        name = ['Pset_',name_extern(3:length(name_extern))];
        c2 = cell_change(c2,'$PARSETNAME$',name);
        c1 = cell_add(c1,c2);
    elseif(str_find_f(name_extern,'Pset_') == 1 )
        a=0;
    else
        c2 = CHECK_INPUT;
        c2 = cell_change(c2,'$NAME$',modul_name);
        c2 = cell_change(c2,'$VARNAME$',name_extern);
        c1 = cell_add(c1,c2);
    end
  end
  c = cell_change(c,'$CHECK_INPUTS_AND_PARAMS$',c1);

  % set init input
  c1 = {};
  for i=1:n_inp
    inp = inp_liste{i};
    name_intern = inp{1};
    if( length(inp) > 1 && isnan(str_get_vec(inp{2})) )
      name_extern = inp{2};
    else
      name_extern = inp{1};
    end
    c3 = SET_INIT_INPUT;
    c3 = cell_change(c3,'$VARNAME_I$',name_intern);
    c3 = cell_change(c3,'$VARNAME_E$',name_extern);
    c1 = cell_add(c1,c3);
  end
  c = cell_change(c,'$SET_INIT_INPUTS$',c1);

  % Loop Function
  c1 = {};
  for i=1:n_inp
    inp = inp_liste{i};
    name_intern = inp{1};
    if( length(inp) > 1 && isnan(str_get_vec(inp{2})) )
      name_extern = inp{2};
    else
      name_extern = inp{1};
    end
    c2 = SET_INPUT;
    c2 = cell_change(c2,'$VARNAME_I$',name_intern);
    c2 = cell_change(c2,'$VARNAME_E$',name_extern);
    c1 = cell_add(c1,c2);
  end
  c = cell_change(c,'$SET_INPUTS$',c1);

  c1 = {};
  for i=1:n_out
    o  = out_liste{i};
    c2 = SET_OUTPUT;
    c2 = cell_change(c2,'$VARNAME$',o{1});
    c1 = cell_add(c1,c2);
  end
  c = cell_change(c,'$SET_OUTPUTS$',c1);

  % Zusatzfunktionen
  c = cell_change(c,'$CHECK_NAME_OF_STRUCT_FUNC$',CHECK_NAME_OF_STRUCT_FUNC);

  % allgemeines Ersetzen
  c = cell_change(c,'$NAME$', modul_name);
  c = cell_change(c,'$SNAME$', lower(modul_name));
  c = cell_change(c,'$MEX_NAME$',['mex_',modul_name]);

  okay = write_ascii_file(m_file,c);
  if( ~okay )
    mess = sprintf('Fehler bei Schreiben von m-File in: <%s>',m_file);
  end

  % Beispiel m-File
  %----------------
  c = EXAMPLE_MFILE;

  % Erstellen des Outputvektors
  c1 = {};
  for i=1:n_inp
    inp = inp_liste{i};
    name_intern = inp{1};
    if( length(inp) > 1 && isnan(str_get_vec(inp{2})) )
      name_extern = inp{2};
    else
      name_extern = inp{1};
    end
    c2 = SET_INPUT_STRUCT_NAME;
    c2 = cell_change(c2,'$VARNAME$',name_extern);
    c1 = cell_add(c1,c2);
  end
  c = cell_change(c,'$SET_INPUT_STRUCT_NAMES$',c1);
  c = cell_change(c,'$NAME$', modul_name);
  c = cell_change(c,'$SNAME$', lower(modul_name));

  % Beispielaufrufe
  c1 = str_split(m_file,' ');
  m_name = [c1{1},'_example_run.m'];
  okay = write_ascii_file(m_name,c);
  if( ~okay )
    mess = sprintf('Fehler bei Schreiben von m-File in: <%s>',m_name);
  end

end
function c = build_rtas_mex_c_file_text

  c = ...
  {'////////////////////////////////////////////////////////////////////////////////////////////////' ...
  ,'//                                                                                            //' ...
  ,'//                                mex_fr.cpp                                                  //' ...
  ,'//                                                                                            //' ...
  ,'////////////////////////////////////////////////////////////////////////////////////////////////' ...
  ,'//                                                                                            //' ...
  ,'//                     mex wrapper for wave task module                                       //' ...
  ,'//                                                                                            //' ...
  ,'////////////////////////////////////////////////////////////////////////////////////////////////' ...
  ,' ' ...
  ,'#define MEX_FUNCTION_NAME       "mex_$$MOD_NAME$$"' ...
  ,' ' ...
  ,'/*' ...
  ,'* Need to include simstruc.h for the definition of the SimStruct and' ...
  ,'* its associated macro definitions.' ...
  ,'*/' ...
  ,'#include "mex.h"' ...
  ,'#include "matrix.h"' ...
  ,'#include <math.h>' ...
  ,' ' ...
  ,'/*****************************************/' ...
  ,'/*          RTAS                         */' ...
  ,'/*****************************************/' ...
  ,'#include "mex_$$MOD_NAME$$_frame.c"' ...
  ,'#include "$$MOD_NAME$$_rtasmodul.h"' ...
  ,' ' ...
  ,'/*****************************************/' ...
  ,'/*          locals                       */' ...
  ,'/*****************************************/' ...
  ,' ' ...
  ,'void mexFunction_SetInput(const mxArray *pinfo,const mxArray *pinput);' ...
  ,'void mexFunction_SetOutput(mxArray **ppoutput);' ...
  ,'void mexFunction_ReadInput(const mxArray *pinput);' ...
  ,'void mexFunction_WriteOutput(mxArray **ppoutput);' ...
  ,'void mexFunction_Done(void);' ...
  ,' ' ...
  ,'struct SInfo {' ...
  ,' ' ...
  ,'    unsigned char        init_done;' ...
  ,'    int                  number_of_inputs;' ...
  ,'    int                 *pinput_index;' ...
  ,'		int                 *pinput_var_index;' ...
  ,'    int                  number_of_outputs;' ...
  ,'    char               **pp_output_name_list;' ...
  ,'		int                 *poutput_var_index;' ...
  ,'    double               delta_t;' ...
  ,'    double               time;' ...
  ,'};' ...
  ,'struct SInfo Info = {0,0,0,0,0,0,0,0.0,0.0};' ...
  ,' ' ...
  ,'/*=====================*' ...
  ,'* mex-function methods *' ...
  ,'*=====================*/' ...
  ,'// y = function(''i'',info,input);' ...
  ,'// y = function(''l'',info,input);' ...
  ,'// y = function(''d'');' ...
  ,'// -----------------' ...
  ,'// state   = ''i'';     % init' ...
  ,'//         = ''l'';     % loop' ...
  ,'//         = ''d'';     % done' ...
  ,'// info.delta_t = delta_t; % Zeitschrittgröße' ...
  ,'//' ...
  ,'// input-Struktur' ...
  ,'// ----------------' ...
  ,'// input.name   = input;   % Inputgrößen (Skalar)' ...
  ,'//' ...
  ,'// y: output-Struktur' ...
  ,'// ------------------' ...
  ,'// y.okay               % =1:Ist Okay/=2:Warnung/=1:Fehler' ...
  ,'// y.message            % Nachricht' ...
  ,'// y.output             % Outputgröße (Skalar)' ...
  ,'//--------------------------------------------------------------' ...
  ,'// function: mexFunction - Entry point from Matlab environment' ...
  ,'// INPUTS:' ...
  ,'//   nlhs - number of left hand side arguments (outputs)' ...
  ,'//   plhs[] - pointer to table where created matrix pointers are' ...
  ,'//            to be placed' ...
  ,'//   nrhs - number of right hand side arguments (inputs)' ...
  ,'//   prhs[] - pointer to table of input matrices' ...
  ,'//--------------------------------------------------------------' ...
  ,'void mexFunction( int nlhs, mxArray *plhs[], int nrhs, const mxArray  *prhs[] )' ...
  ,'{' ...
  ,'  unsigned char state;' ...
  ,' ' ...
  ,' ' ...
  ,'  // Prüfen, ob erster Parameter ein Wert ist' ...
  ,'  if( (nrhs < 1) || !mxIsChar(prhs[0]) ) {' ...
  ,'    mexErrMsgTxt(MEX_FUNCTION_NAME"_error: erster Parameter muß ein Wert sein (''i'': init,''l'': loop,''d'': done) ");' ...
  ,'  } else {' ...
  ,'    char *input_buf = mxArrayToString(prhs[0]);' ...
  ,'    state = input_buf[0];' ...
  ,'    if(  (state != ''i'') && (state != ''I'')' ...
  ,'      && (state != ''l'') && (state != ''L'')' ...
  ,'      && (state != ''d'') && (state != ''D'')' ...
  ,'      ) {' ...
  ,'      mexErrMsgTxt(MEX_FUNCTION_NAME"_error: erster Parameter muß einen entsprechenden Wert haben (''i'': init,''l'': loop,''d'': done) ");' ...
  ,'    }' ...
  ,'  }' ...
  ,' ' ...
  ,'  // Steuerung mit state' ...
  ,'  switch(state)' ...
  ,'  {' ...
  ,'  // Initialisieren' ...
  ,'  //---------------' ...
  ,'  case ''i'':' ...
  ,'  case ''I'':' ...
  ,' ' ...
  ,'    // Alles zurücksetzen' ...
  ,'    mexFunction_Done();' ...
  ,' ' ...
  ,'    // Prüfen des zweiten Parameters info (struktur)' ...
  ,'    if( (nrhs < 2) || !mxIsStruct(prhs[1]) ) {' ...
  ,'      mexErrMsgTxt(MEX_FUNCTION_NAME"_error(init): zweiter Parameter muß eine Struktur sein (info)");' ...
  ,'    }' ...
  ,'    // Prüfen des dritten Parameters input (struktur)' ...
  ,'    if( (nrhs < 3) || !mxIsStruct(prhs[2]) ) {' ...
  ,'      mexErrMsgTxt(MEX_FUNCTION_NAME"_error(init): dritter Parameter muß eine Struktur sein (input)");' ...
  ,'    }' ...
  ,' ' ...
  ,'    mexFunction_SetInput(prhs[1],prhs[2]);' ...
  ,' ' ...
  ,'    // Ausgabe anlegen' ...
  ,'    if( nlhs > 0 )' ...
  ,'      mexFunction_SetOutput(&plhs[0]);' ...
  ,' ' ...
  ,'    $$MOD_NAME$$_delta_t = Info.delta_t;' ...
  ,' ' ...
  ,'		if( RTAS_Modul_Init() )' ...
  ,'		{' ...
  ,'			mexFunction_Done();' ...
  ,'			mexErrMsgTxt(MEX_FUNCTION_NAME"_error(init): Initialisiereungsfehler");' ...
  ,'		}' ...
  ,' ' ...
  ,'    mexPrintf("mexFunction: <%s>\n",MEX_FUNCTION_NAME);' ...
  ,' ' ...
  ,'    break;' ...
  ,'  // Loop-Berechnung' ...
  ,'  //----------------' ...
  ,'  case ''l'':' ...
  ,'  case ''L'':' ...
  ,' ' ...
  ,'    // Prüfen des dritten Parameters input (struktur)' ...
  ,'    if( (nrhs < 2) || !mxIsStruct(prhs[1]) ) {' ...
  ,'      mexErrMsgTxt(MEX_FUNCTION_NAME"_error(loop): zweiter Parameter muß eine Struktur sein (input)");' ...
  ,'    }' ...
  ,' ' ...
  ,'    mexFunction_ReadInput(prhs[1]);' ...
  ,' ' ...
  ,'    Info.time += Info.delta_t;' ...
  ,' ' ...
  ,'    RTAS_Modul_Loop();' ...
  ,' ' ...
  ,'    if( nlhs > 0 )' ...
  ,'      mexFunction_WriteOutput(&plhs[0]);' ...
  ,' ' ...
  ,'    break;' ...
  ,'  case ''d'':' ...
  ,'  case ''D'':' ...
  ,' ' ...
  ,'    RTAS_Modul_Done();' ...
  ,'    mexFunction_Done();' ...
  ,'    break;' ...
  ,'  }' ...
  ,' ' ...
  ,' ' ...
  ,'}' ...
  ,'void mexFunction_SetInput(const mxArray *pinfo,const mxArray *pinput)' ...
  ,'{' ...
  ,'  int           nfields;' ...
  ,'  int           ifield;' ...
  ,'  mxArray       *pvalue;' ...
  ,'  const char    *fieldname;' ...
  ,'  unsigned char flag = 0;' ...
  ,'  unsigned char flag_dt = 0;' ...
  ,'	int           ncount;' ...
  ,'	int           i,nvar;' ...
  ,' ' ...
  ,'  RTAS_Initialize_Structs();' ...
  ,'  RTAS_set_Variables_to(0);' ...
  ,'  RTAS_set_Parameter();' ...
  ,' ' ...
  ,'  // Schleife über alle info-Strukturelemente' ...
  ,'  //=========================================' ...
  ,'  nfields = mxGetNumberOfFields(pinfo);' ...
  ,'  for( ifield=0;ifield<nfields;ifield++) {' ...
  ,' ' ...
  ,'    pvalue    = mxGetFieldByNumber(pinfo, 0, ifield);' ...
  ,'    fieldname = mxGetFieldNameByNumber(pinfo,ifield);' ...
  ,' ' ...
  ,' ' ...
  ,'    if( mxIsNumeric(pvalue) ) { // Prüfen, ob Wert' ...
  ,' ' ...
  ,'      if( strcmp(fieldname,"delta_t") == 0 ) {' ...
  ,' ' ...
  ,'        Info.delta_t = *mxGetPr(pvalue);' ...
  ,'        flag_dt       = 1;' ...
  ,' ' ...
  ,'      }' ...
  ,'    }' ...
  ,'  }' ...
  ,' ' ...
  ,'  // Zuordnung der Inputnamen bilden' ...
  ,'  //================================' ...
  ,'	// Anzahl mex-Input' ...
  ,'  nfields = mxGetNumberOfFields(pinput);' ...
  ,' ' ...
  ,'	// Anzahl Variablen' ...
  ,'	nvar = 0;' ...
  ,'	while( RTAS_Variablen[nvar].CName != 0 )' ...
  ,'	{' ...
  ,'		++nvar;' ...
  ,'	}' ...
  ,'	// Anzahl rtas-Input' ...
  ,'	Info.number_of_inputs = 0;' ...
  ,'	while( RTAS_Input[Info.number_of_inputs].RName != 0 )' ...
  ,'	{' ...
  ,'		++Info.number_of_inputs;' ...
  ,'	}' ...
  ,' ' ...
  ,'	// Zuordnung RTAS-Input mexfile-Input' ...
  ,'  ncount = 0;' ...
  ,'  if( Info.number_of_inputs > 0)' ...
  ,'  {' ...
  ,'    int inp_index = 0;' ...
  ,' ' ...
  ,'    Info.pinput_index = (int *)malloc(sizeof(int)*Info.number_of_inputs);' ...
  ,'    Info.pinput_var_index   = (int *)malloc(sizeof(int) * Info.number_of_inputs);' ...
  ,' ' ...
  ,'		for( inp_index=0;inp_index<Info.number_of_inputs;++inp_index)' ...
  ,'		{' ...
  ,'			// suche Zuordnung zur Variablentabelle RTAS' ...
  ,'			flag = 1;' ...
  ,'			for( i=0;i<nvar;++i)' ...
  ,'			{' ...
  ,'				if( strcmp(RTAS_Input[inp_index].RName,RTAS_Variablen[i].RName) == 0 )' ...
  ,'				{' ...
  ,'					Info.pinput_var_index[inp_index] = i;' ...
  ,'					flag = 0;' ...
  ,'					break;' ...
  ,'				}' ...
  ,'			}' ...
  ,'			if( flag )' ...
  ,'			{' ...
  ,'				char ttext[256];' ...
  ,'				mexFunction_Done();' ...
  ,'				sprintf_s(ttext,255,"%s_error: Input <%s> konnte nicht in Variablenliste RTAS gefunden werden",MEX_FUNCTION_NAME,RTAS_Input[inp_index].RName);' ...
  ,'				mexErrMsgTxt(ttext);' ...
  ,'			}' ...
  ,'      // In matlab struktur suchen' ...
  ,'      flag = 0;' ...
  ,'      Info.pinput_index[inp_index] = 0;' ...
  ,'      for( ifield=0;ifield<nfields;ifield++)' ...
  ,'			{' ...
  ,' ' ...
  ,'        pvalue    = mxGetFieldByNumber(pinput, 0, ifield);' ...
  ,'        fieldname = mxGetFieldNameByNumber(pinput,ifield);' ...
  ,' ' ...
  ,'        if( mxIsNumeric(pvalue) )' ...
  ,'				{ // Prüfen, ob Wert' ...
  ,'					if( strcmp(fieldname,RTAS_Input[inp_index].RName) == 0 )' ...
  ,'					{' ...
  ,'            Info.pinput_index[inp_index] = ifield;' ...
  ,'            flag                         = 1;' ...
  ,'						++ncount;' ...
  ,'          }' ...
  ,'        }' ...
  ,'        if( flag )' ...
  ,'          break;' ...
  ,'      }' ...
  ,' ' ...
  ,'		}' ...
  ,'	}' ...
  ,' ' ...
  ,'  // Init Flag' ...
  ,'  if( !flag_dt )' ...
  ,'	{' ...
  ,'		mexFunction_Done();' ...
  ,'		mexErrMsgTxt(MEX_FUNCTION_NAME"_error: In zweiter Parameterstruktur info wurde delta_t nicht gelesen");' ...
  ,'	}' ...
  ,'  // delta_dt' ...
  ,'  Info.delta_t = fabs(Info.delta_t);' ...
  ,'  if( Info.delta_t < 1e-10 )' ...
  ,'	{' ...
  ,'		mexFunction_Done();' ...
  ,'    mexErrMsgTxt(MEX_FUNCTION_NAME"_error: In zweiter Parameterstruktur info ist delta_t zu klein");' ...
  ,'	}' ...
  ,'	if( ncount != Info.number_of_inputs )' ...
  ,'	{' ...
  ,'		mexFunction_Done();' ...
  ,'    mexErrMsgTxt(MEX_FUNCTION_NAME"_error: Input-Vektor Matlab und Input-Vektor RTAS stimmt nicht überein");' ...
  ,'	}' ...
  ,' ' ...
  ,'  Info.init_done = 1;' ...
  ,'  Info.time      = 0.0;' ...
  ,'}' ...
  ,'void mexFunction_SetOutput(mxArray **ppoutput)' ...
  ,'{' ...
  ,'  char *p_name;' ...
  ,'  int dims[2];' ...
  ,'  double *pvalue;' ...
  ,'	int    i,out_index;' ...
  ,'	int    nvar;' ...
  ,'  unsigned char flag;' ...
  ,' ' ...
  ,'	// Anzahl Variablen' ...
  ,'	nvar = 0;' ...
  ,'  while( RTAS_Variablen[nvar].RName != 0 )' ...
  ,'	{' ...
  ,'		++nvar;' ...
  ,'	}' ...
  ,'	// Anzahl rtas-Output' ...
  ,'	Info.number_of_outputs = 0;' ...
  ,'  while( RTAS_Output[Info.number_of_outputs].RName != 0 )' ...
  ,'	{' ...
  ,'		++Info.number_of_outputs;' ...
  ,'	}' ...
  ,'  if(Info.number_of_outputs > 0)' ...
  ,'	{' ...
  ,'    // Output anlegen' ...
  ,'    Info.pp_output_name_list = (char **)malloc(sizeof(char *) * Info.number_of_outputs);' ...
  ,'    Info.poutput_var_index   = (int *)malloc(sizeof(int) * Info.number_of_outputs);' ...
  ,' ' ...
  ,'		for( out_index=0;out_index<Info.number_of_outputs;++out_index)' ...
  ,'		{' ...
  ,'			// suche Zuordnung zur Variablentabelle' ...
  ,'			flag = 1;' ...
  ,'			for( i=0;i<nvar;++i)' ...
  ,'			{' ...
  ,'				if( strcmp(RTAS_Output[out_index].RName,RTAS_Variablen[i].RName) == 0 )' ...
  ,'				{' ...
  ,'					Info.poutput_var_index[out_index] = i;' ...
  ,'					flag = 0;' ...
  ,'					break;' ...
  ,'				}' ...
  ,'			}' ...
  ,'			if( flag )' ...
  ,'			{' ...
  ,'				char ttext[256];' ...
  ,'				mexFunction_Done();' ...
  ,'				sprintf_s(ttext,255,"%s_error: Output <%s> konnte nicht in Variablenliste RTAS gefunden werden",MEX_FUNCTION_NAME,RTAS_Output[out_index].RName);' ...
  ,'				mexErrMsgTxt(ttext);' ...
  ,'			}' ...
  ,'      p_name = (char *)malloc(sizeof(char) * (strlen(RTAS_Output[out_index].RName)+1) );' ...
  ,'      strcpy(p_name,RTAS_Output[out_index].RName);' ...
  ,'      Info.pp_output_name_list[out_index] = p_name;' ...
  ,'		}' ...
  ,' ' ...
  ,' ' ...
  ,'    // matlab-struktur anlegen' ...
  ,' 		dims[0] = 1;' ...
  ,'		dims[1] = 1;' ...
  ,'    *ppoutput = mxCreateStructArray(2,(mwSize *)dims,Info.number_of_outputs,(const char **)Info.pp_output_name_list);' ...
  ,' ' ...
  ,'		// Werte anlegen' ...
  ,' 		dims[0] = 1;' ...
  ,'		dims[1] = 1;' ...
  ,'    for( out_index=0;out_index<Info.number_of_outputs;++out_index)' ...
  ,'    {' ...
  ,'      mxArray *parray;' ...
  ,'      parray = mxCreateNumericArray(2,(mwSize *)dims,mxDOUBLE_CLASS,mxREAL);' ...
  ,'      pvalue = mxGetPr(parray);' ...
  ,' ' ...
  ,'			i = Info.poutput_var_index[out_index];' ...
  ,' ' ...
  ,'			RTAS_lp_rp_zuweisung((void*)pvalue, DEF_double, RTAS_Variablen[i].CName, RTAS_Variablen[i].CTyp);' ...
  ,' ' ...
  ,'      mxSetFieldByNumber(*ppoutput,0,out_index,parray);' ...
  ,'    }' ...
  ,'  }' ...
  ,' ' ...
  ,'}' ...
  ,'void mexFunction_ReadInput(const mxArray *pinput)' ...
  ,'{' ...
  ,'  mxArray *parray;' ...
  ,'  double  value;' ...
  ,'  int inp_index,i,ifield;' ...
  ,'  int nfields = mxGetNumberOfFields(pinput);' ...
  ,'  for(inp_index = 0; inp_index < Info.number_of_inputs; inp_index++)' ...
  ,'  {' ...
  ,'		ifield = Info.pinput_index[inp_index];' ...
  ,'    if( ifield >= nfields ) ifield = nfields-1;' ...
  ,'    parray    = mxGetFieldByNumber(pinput, 0, ifield );' ...
  ,' ' ...
  ,'		if(parray)' ...
  ,'		{' ...
  ,'			value = *mxGetPr(parray);' ...
  ,'			i = Info.pinput_var_index[inp_index];' ...
  ,'			RTAS_lp_rp_zuweisung( RTAS_Variablen[i].CName, RTAS_Variablen[i].CTyp,(void*)(&value), DEF_double);' ...
  ,'		}' ...
  ,'	}' ...
  ,'}' ...
  ,'void mexFunction_WriteOutput(mxArray **ppoutput)' ...
  ,'{' ...
  ,'  int dims[2];' ...
  ,'  double *pvalue;' ...
  ,'  int out_index,i;' ...
  ,'  mxArray *parray;' ...
  ,' ' ...
  ,'  // matlab-struktur anlegen' ...
  ,'	dims[0] = 1;' ...
  ,'	dims[1] = 1;' ...
  ,'  *ppoutput = mxCreateStructArray(2,(mwSize *)dims,Info.number_of_outputs,(const char **)Info.pp_output_name_list);' ...
  ,' ' ...
  ,' ' ...
  ,'  // Werte anlegen' ...
  ,'	dims[0] = 1;' ...
  ,'	dims[1] = 1;' ...
  ,'  for( out_index=0;out_index<Info.number_of_outputs;++out_index )' ...
  ,'  {' ...
  ,'    parray = mxCreateNumericArray(2,(mwSize *)dims,mxDOUBLE_CLASS,mxREAL);' ...
  ,'    pvalue = mxGetPr(parray);' ...
  ,' ' ...
  ,' ' ...
  ,'		i = Info.poutput_var_index[out_index];' ...
  ,' ' ...
  ,'		RTAS_lp_rp_zuweisung((void*)pvalue, DEF_double, RTAS_Variablen[i].CName, RTAS_Variablen[i].CTyp);' ...
  ,' ' ...
  ,'    mxSetFieldByNumber(*ppoutput,0,out_index,parray);' ...
  ,'  }' ...
  ,' ' ...
  ,'}' ...
  ,'void mexFunction_Done(void)' ...
  ,'{' ...
  ,'  int i;' ...
  ,'	Info.pinput_var_index   = (int *)malloc(sizeof(int) * Info.number_of_inputs);' ...
  ,' ' ...
  ,'	if( Info.pinput_index )     free(Info.pinput_index);' ...
  ,'	if( Info.pinput_var_index ) free(Info.pinput_var_index);' ...
  ,' ' ...
  ,'  if( Info.number_of_outputs > 0 )' ...
  ,'	{' ...
  ,'	  for(i=0;i<Info.number_of_outputs;i++)' ...
  ,'		{' ...
  ,'      char *p_name = Info.pp_output_name_list[i];' ...
  ,'      free( p_name );' ...
  ,'    }' ...
  ,'    free(Info.pp_output_name_list);' ...
  ,'  }' ...
  ,'	if( Info.poutput_var_index ) free(Info.poutput_var_index);' ...
  ,' ' ...
  ,'	Info.delta_t             = 0.0;' ...
  ,'  Info.init_done           = 0;' ...
  ,'  Info.number_of_inputs    = 0;' ...
  ,'  Info.pinput_index        = 0;' ...
  ,'	Info.pinput_var_index    = 0;' ...
  ,'  Info.number_of_outputs   = 0;' ...
  ,'  Info.pp_output_name_list = 0;' ...
  ,'  Info.poutput_var_index   = 0;' ...
  ,'}' ...
  };
end
function c = build_rtas_mes_text_MFILE
  c = ... 
  {'% $NAME$' ...
  ,'function d = $NAME$(state,d,info)' ...
  ,'%' ...
  ,'% function d = $NAME$(state,d,info)' ...
  ,'% state:      ''i'' init  - set outputstructure to d with info.n values (zero)' ...
  ,'%                       - set $SNAME$_input structure' ...
  ,'%                       - init with info.delta_t' ...
  ,'%             ''l'' loop  - set input-values from d with index info.index' ...
  ,'%                       - calculate function and set output to d-strucure' ...
  ,'%             ''d'' done  - reset function' ...
  ,'% d           vector structure with all inputs and outputs' ...
  ,'% info        structure with info.delta_t' ...
  ,'%                            info.index' ...
  ,'%                            info.n' ...
  ,' ' ...
  ,'% Global variable' ...
  ,'global $SNAME$_input $SNAME$_output' ...
  ,' ' ...
  ,'switch state' ...
  ,'% init' ...
  ,'%=====' ...
  ,'case ''i''' ...
  ,'  % check info-data' ...
  ,'  %----------------' ...
  ,'  if( ~isfield(info,''delta_t'') )' ...
  ,'    error(''$NAME$_error: delta_t (loop time [s]) is not in structure info'');' ...
  ,'  end' ...
  ,'  if( ~isfield(info,''n'') )' ...
  ,'    error(''$NAME$_error: n (n-loops (t1-t0)/delta_t+1) is not in structure info'');' ...
  ,'  end' ...
  ,'  if( ~isfield(info,''index'') )' ...
  ,'    error(''$NAME$_error: index (index at init == 1) is not in structure info'');' ...
  ,'  end' ...
  ,' ' ...
  ,'  % check inputs and params' ...
  ,'  %------------------------' ...
  ,'$CHECK_INPUTS_AND_PARAMS$' ...
  ,'  % set inputs' ...
  ,'  %-----------' ...
  ,'  $SNAME$_input = [];' ...
  ,'$SET_INIT_INPUTS$' ...
  ,'  % call init function' ...
  ,'  %-------------------' ...
  ,'  $SNAME$_output = $MEX_NAME$(''i'',info,$SNAME$_input);' ...
  ,' ' ...
  ,'  % set output structure names' ...
  ,'  %---------------------------' ...
  ,'$SET_OUTPUT_STRUCT_NAMES$' ...
  ,'  % set output' ...
  ,'  %-----------' ...
  ,'$SET_OUTPUTS$' ...
  ,'% loop' ...
  ,'%=====' ...
  ,'case ''l''' ...
  ,'  % set input' ...
  ,'  %----------' ...
  ,'$SET_INPUTS$' ...
  ,'  % call loop function' ...
  ,'  %-------------------' ...
  ,'  $SNAME$_output = $MEX_NAME$(''l'',$SNAME$_input);' ...
  ,' ' ...
  ,'  % set output' ...
  ,'  %----------' ...
  ,'$SET_OUTPUTS$' ...
  ,'% done' ...
  ,'%=====' ...
  ,'case ''d''' ...
  ,'  $MEX_NAME$(''d'');' ...
  ,'end' ...
  ,' ' ...
  ,' ' ...
  ,'$CHECK_NAME_OF_STRUCT_FUNC$' ...
  };
end