function e = cg_read_ecal_channel_TrajectoryRequestPb(d,channel_name)

  ii = str_find_f(channel_name,'Pb');
  if( ii > 0 )
    name_channel = channel_name(1:max(1,ii-1));
  else
    name_channel = channel_name;
  end
  sigliste     = {{'valid'          , 1,'-'   ,'int',0,'Valid Flag'} ...
                 ,{'priority'       , 1,'-'   ,'int',0,'Priority'} ...
                 ,{'change_counter' , 1,'-'   ,'int',0,'Cange Counter'} ...
                 ,{'ctrl_type'      , 1,'enum'  ,'int',0,'ctrl_type: 0:TYPE_LAT_CTRL, 1:TYPE_LONG_CTRL, 2:TYPE_LAT_LONG_CTRL'} ...
                 ,{'point_type'     , 1,'enum'  ,'int',0,'point_type: 0:TYPE_FA, 1:TYPE_COG, 2:TYPE_FARA, 3:TYPE_RA'} ...
                 ,{'calc_type'      , 1,'enum'  ,'int',0,'calc_type: 0:TRAJECTORY, 1:PATH'} ...
                 ,{'replanning'     , 1,'-'   ,'int',0,'replanning'} ...
                 ,{'final_segment'  , 1,'-'   ,'int',0,'final segment'} ...
                 ,{'maneuver_type'  , 1,'enum'  ,'int',0,'maneuver_type: 0:CRUISING, 1:PARKING, 2:VALET_PARKING, 3:GARAGE_PARKING, 4:PEOPLEMOVER'} ...
                 ,{'x_fa_vec'       , 1,'m'     ,'double',1,'Path/Trajectory x-Posistion FA'} ...
                 ,{'y_fa_vec'       , 1,'m'     ,'double',1,'Path/Trajectory y-Posistion FA'} ...
                 ,{'s_fa_vec'       , 1,'m'     ,'double',1,'Path/Trajectory distance along FA'} ...
                 ,{'x_cog_vec'      , 1,'m'     ,'double',1,'Path/Trajectory x-Posistion COG'} ...
                 ,{'s_cog_vec'      , 1,'m'     ,'double',1,'Path/Trajectory distance along COG'} ...
                 ,{'y_cog_vec'      , 1,'m'     ,'double',1,'Path/Trajectory y-Posistion COG'} ...
                 ,{'x_ra_vec'       , 1,'m'     ,'double',1,'Path/Trajectory x-Posistion RA'} ...
                 ,{'y_ra_vec'       , 1,'m'     ,'double',1,'Path/Trajectory y-Posistion RA'} ...
                 ,{'s_ra_vec'       , 1,'m'     ,'double',1,'Path/Trajectory distance along RA'} ...
                 ,{'theta_vec'      , 1,'rad'   ,'double',1,'Path/Trajectory yaw angle'} ...
                 ,{'kappa_vec'      , 1,'1/m'   ,'double',1,'Path/Trajectory kappa'} ...
                 ,{'vel_vec'        , 1,'m/s'   ,'double',1,'Path/Trajectory Velocity-Points'} ...
                 ,{'acc_vec'        , 1,'m/s/s' ,'double',1,'Path/Trajectory Acceleration-Points'} ...
                 ,{'dir'            , 1,'enum'  ,'int',0,'Direction on Path/Trajectory 1:DIR_FORWARD, 2:DIR_BACKWARD'} ...
                 ,{'timestamp_vec'  , 1,'µs'    ,'double',1,'Path/Trajectory timepoints-Points'} ...
                 ,{'ramp_out_request'          , 1,'enum'  ,'int',0,'Ramp Out Request: 0:TRR_NO_RAMP, 1:TRR_FAST_RAMP, 2:TRR_MEDIUM_RAMP, 3:TRR_SLOW_RAMP'} ...
                 ,{'currentManeuver'           , 1,'enum'  ,'int',0,'crr. maneuver 0:MANEUVER_UNDETERMINED, 1:MANEUVER_LANE_CHANGE_LEFT, 2:MANEUVER_LANE_CHANGE_RIGHT, 3:MANEUVER_PARKING_INTERMEDIATE_SEGMENT, 4:MANEUVER_PARKING_FINAL_SEGMENT'} ...
                 ,{'maneuverProgress'          , 1,'%'  ,'double',1,'progress of maneuver in %'} ...
                 };
                 
%                  header: [1x1 struct]
%                     x_m: 9.138123145081461e+02
%                     y_m: -5.508884514697104e+02
%                  x_ra_m: 9.116008999764259e+02
%                  y_ra_m: -5.493185502725337e+02
%                 x_cog_m: 9.128240274829083e+02
%                 y_cog_m: -5.501868584568128e+02
%                 yaw_rad: -0.617344822108180
%           slip_angle_ra: 7.923510775588877e-04
%                 sigma_x: 0
%                 sigma_y: 0
%     sigma_slip_angle_ra: 1
%         sigma_yaw_angle: 0
%               track_rad: 0
%           motion_status: 1

  e    = struct([]);
  
  
%   
%   n         = length(d.data);
%   if( isfield(d.data{1},'header') )
%     if( isfield(d.data{1}.header,'timestamp') )
%       timestamp = zeros(n,1);
%       for j=1:n
%         timestamp(j) = d.data{j}.header.timestamp;
%       end
%     end
%   end
%   
%   if( isfield(d,'timestamps') )
%     time = double(d.timestamps)*1.0e-6;
%   elseif( exist('timestamp','var') )
%     time = double(timestamp)*1.0e-6;
%   else
%     error('%_err: time is not available',mfilename)
%   end
%   
%   if( exist('timestamp','var') )
%     e = e_data_add_value(e,[name_channel,'_timestamp'],'us','tiem stamp',time,timestamp,0);
%   end


  [e,time] = cg_read_ecal_channel_read_timestamp(e,d,name_channel);
  
  e = cg_read_ecal_channel_read_signals(e,name_channel,time,d,sigliste);
  
  e = e_data_rename_signal(e,[name_channel,'_header_timestamp'],[name_channel,'_timestamp']);

end
