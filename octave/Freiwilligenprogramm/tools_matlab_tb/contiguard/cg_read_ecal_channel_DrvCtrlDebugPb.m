function e = cg_read_ecal_channel_DrvCtrlDebugPb(d,name_channel)

  sigliste     = {{'x_ego_fa_raw'             , 1,'m'       ,'double'    , 1, ''} ...
                 ,{'y_ego_fa_raw'             , 1,'m'       ,'double' , 1, ''} ...
                 ,{'x_ego_ra_raw'             , 1,'m'       ,'double' , 1, ''} ...
                 ,{'y_ego_ra_raw'             , 1,'m'       ,'double' , 1, ''} ...
                 ,{'yaw_ego_for_raw'          , 1,'rad'     ,'double'    , 1, ''} ...
                 ,{'x_ego'                    , 1,'m'       ,'double'    , 1, ''} ...
                 ,{'y_ego'                    , 1,'m'       ,'double'    , 1, ''} ...
                 ,{'yaw_ego'                  , 1,'rad'     ,'double'    , 1, ''} ...
                 ,{'x_traj_is'                , 1,'m'       ,'double'    , 1, ''} ...
                 ,{'y_traj_is'                , 1,'m'       ,'double'    , 1, ''} ...
                 ,{'yaw_traj_is'              , 1,'rad'     ,'double'    , 1, ''} ...
                 ,{'x_traj'                   , 1,'m'       ,'double'    , 1, ''} ...
                 ,{'y_traj'                   , 1,'m'       ,'double'    , 1, ''} ...
                 ,{'yaw_traj'                 , 1,'rad'     ,'double'    , 1, ''} ...
                 ,{'kappa_traj_is'            , 1,'1/m'     ,'double'    , 1, ''} ...
                 ,{'kappa_traj'               , 1,'1/m'     ,'double'    , 1, ''} ...
                 ,{'run_time'                 , 1,'ms'      ,'double'    , 1, ''} ...
                 ,{'dummy'                    , 1,'-'       ,'double'    , 1, ''} ...
                 ,{'index_act'                , 1,'enum'    ,'int'    , 1, ''} ...
                 ,{'d_path_act'               , 1,'-'       ,'double'    , 1, ''} ...
                 ,{'dy_raw'                   , 1,'m'       ,'double'    , 1, ''} ...
                 ,{'dpsi_raw'                 , 1,'rad'       ,'double'    , 1, ''} ...
                 ,{'p_part_accel'             , 1,'m/s/s'       ,'double'    , 1, ''} ...
                 ,{'d_part_accel'             , 1,'m/s/s'       ,'double'    , 1, ''} ...
                 ,{'ff_part_accel'            , 1,'m/s/s'       ,'double'    , 1, ''} ...
                 ,{'strwhlang_ref_speed'      , 1,'rad/s'       ,'double'    , 1, ''} ...
                 ,{'strwhlang_ratio'          , 1,'-'           ,'double'    , 1, ''} ...                 
                 ,{'loop_time_ms'             , 1,'ms'      ,'double'    , 1, ''} ...
                 ,{'drv_ctrl_state'           , 1,'enum'      ,'int'    , 0, ''} ...
                 
                 };
                 
  e    = struct([]);
  
  n         = length(d.data);
  if( isfield(d.data{1},'header') )
    timestamp = zeros(n,1);
    for j=1:n
      timestamp(j) = d.data{j}.header.timestamp;
    end
  end
  
  if( isfield(d,'timestamps') )
    time = double(d.timestamps)*1.0e-6;
  elseif( exist('timestamp','var') )
    time = double(timestamp)*1.0e-6;
  else
    error('%_err: time is not available',mfilename)
  end
  
  if( exist('timestamp','var') )
    e = e_data_add_value(e,[name_channel,'_timestamp'],'us','tiem stamp',time,timestamp,0);
  end
%  time = double(d.timestamps)*1.0e-6;
  
  cnames = fieldnames(d.data{1});
  
  for i=1:length(cnames)
    for j=1:length(sigliste)
      dname  = sigliste{j}{1};
      dindex = sigliste{j}{2};
      dunit  = sigliste{j}{3};
      dtype  = sigliste{j}{4};
      dlin   = sigliste{j}{5};
      dcom   = sigliste{j}{6};
      
      if( strcmpi(cnames{i},dname) )
        vec = zeros(n,1);
        if( strcmpi(dtype,'double') )
          for jj=1:n
            vec(jj) = double(d.data{jj}.(cnames{i})(dindex));
          end
        else
          for jj=1:n
            vec(jj) = round(double(d.data{jj}.(cnames{i})(dindex)));
          end
        end
        [tin,vin] = elim_nicht_monoton(time,vec);
        e = e_data_add_value(e,[name_channel,'_',cnames{i}],dunit,dcom,tin,vin,dlin);
      end       
    end
  end
  
  e = e_data_rename_signal(e,[name_channel,'_header_timestamp'],[name_channel,'_timestamp']);


end