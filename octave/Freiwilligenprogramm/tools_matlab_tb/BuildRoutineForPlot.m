function [okay,errtext] = BuildRoutineForPlot(q)
%
% [okay,errtext] = BuildRoutineForPlot(q)
%
% q.plot_m_file         char  m-Filename, q.plot_m_file wird erstmalig
%                             erstellt und dann wieter verwendet
% q.plot_config_names   cell  Konfigname, dh Name des plots
% q.pre_name            char  das plot-m-file (mit BuildPlotFile() gebildet) 
%                             hat den Namen [q.pre_name,Konfigname.m]
% q.add_code_begin      cell  Hier wird Code in cells vorgegeben, der zu
%                             Beginn ausgeführt wird
% q.add_code_end     cell  Hier wird Code in cells vorgegeben, der die 
%                             Datenstruktur d benötigt 
% q.start_dir           char  Start-Dir
% q.use_e_struct        0/1   e-Struktur nutzen
% q.load_one_file       0/1   soll nur eine Datei geladen werden nein(default)/ja
% q.plot_in_one         0/1   mehrere Messungen (Dateien) sollen in ein
%                             Diagramm geplottet
% q.make_script_type    1:    Script zum Auswahl der plots und Einladen der Daten-Dateien
%                       2:    script mit Übergabe e,q und plotten aller
%                             plots
% q.add_plots           0/1   add plot to existing figures

  oakay   = 1;
  errtext = '';
  
  if( ~isfield(q,'pre_name') )
    q.pre_name = '';
  end
  if( ~isfield(q,'plot_config_names') )
    error('%s_error: Datei: q.plot_config_names existiert nicht',mfilename);
  end
  if( ~check_val_in_struct(q,'start_dir','char',1) )
    q.start_dir = 'D:\';
  end
  if( ~check_val_in_struct(q,'use_e_struct','num',1) )
    q.use_e_struct = 0;
  end
  if( ~check_val_in_struct(q,'load_one_file','num',1) )
    q.load_one_file = 1;
  end
  if( ~check_val_in_struct(q,'plot_in_one','num',1) )
    q.plot_in_one = 1;
  end
  if( ~check_val_in_struct(q,'make_script_type','num',1) )
    q.make_script_type = 1;
  end
  if( ~check_val_in_struct(q,'add_code_begin','cell',1) )
    q.add_code_begin = '';
  end
  if( ~check_val_in_struct(q,'add_code_end','cell',1) )
    q.add_code_end = '';
  end
  if( ~check_val_in_struct(q,'add_plots','num',1) )
    q.add_plots = 0;
  end
  
  
  % Script zum Auswahl der plots und Einladen der Daten-Dateien
  %============================================================
  if( q.make_script_type == 1 )

    % Datei einlesen
    if( ~exist(q.plot_m_file,'file') )
      [ okay,c,nc ] = BuildRoutineForPlot_buildmfile( q.plot_m_file, q.start_dir, q.use_e_struct,q.load_one_file,q.plot_in_one,q.add_plots);
    else
      [ okay,c,nc ] = read_ascii_file( q.plot_m_file );
      if( ~okay )
        errtext = sprintf('%s_error: Datei: %s konnte nicht eingelesen werden',mfilename,q.plot_m_file);
        return
      end

      [ifound,ipos] = cell_find_f(c,'d,u,h','n');
      if( ~isempty(ifound) )
        if( q.use_e_struct )
          [ okay,c,nc ] = BuildRoutineForPlot_buildmfile( q.plot_m_file, q.start_dir, q.use_e_struct,q.load_one_file,q.plot_in_one,q.add_plots);
        end
      else
        if( ~q.use_e_struct )
          [ okay,c,nc ] = BuildRoutineForPlot_buildmfile( q.plot_m_file, q.start_dir, q.use_e_struct,q.load_one_file,q.plot_in_one,q.add_plots);
        end
      end      
    end
    % Plot-Dateie-Namen sammeln
    q.pliste = BuildRoutineForPlot_plot_names(q);
    q.fliste = BuildRoutineForPlot_plot_file_names(q);
    % config_name anpassen
    [c,okay,errtext] = BuildRoutineForPlot_config_names(q,c);
    if( ~okay )
      errtext = sprintf('%s_error: %s (BuildRoutineForPlot_config_names)',mfilename,errtext);
      return
    end

    [c,okay,errtext] = BuildRoutineForPlot_switch(q,c);
    if( ~okay )
      errtext = sprintf('%s_error: %s (BuildRoutineForPlot_switch)',mfilename,errtext);
      return
    end


    [c,okay,errtext] = BuildRoutineForPlot_add_code_begin(q,c);
    [c,okay,errtext] = BuildRoutineForPlot_add_code_end(q,c);
    if( ~okay )
        errtext = sprintf('%s_error: %s (BuildRoutineForPlot_edd_code)',mfilename,errtext);
    end

    % Datei schreiben
    okay = write_ascii_file(q.plot_m_file,c );
    if( ~okay )
      errtext = sprintf('%s_error: Datei: %s konnte nicht geschrieben werden',mfilename,q.plot_m_file);
      return
    end
  % script mit Übergabe e,q und plotten aller plots
  %================================================
  else
    
    [ okay,c,nc ] = BuildRoutineForPlot_buildmfile_type2( q.plot_m_file, q.start_dir, q.use_e_struct,q.load_one_file,q.plot_in_one,q.add_plots);

    q.pliste = BuildRoutineForPlot_plot_names(q);
    q.fliste = BuildRoutineForPlot_plot_file_names(q);
    % config_name anpassen
    [c,okay,errtext] = BuildRoutineForPlot_config_names(q,c);
    if( ~okay )
      errtext = sprintf('%s_error: %s (BuildRoutineForPlot_config_names)',mfilename,errtext);
      return
    end

    [c,okay,errtext] = BuildRoutineForPlot_switch(q,c);
    if( ~okay )
      errtext = sprintf('%s_error: %s (BuildRoutineForPlot_switch)',mfilename,errtext);
      return
    end


    [c,okay,errtext] = BuildRoutineForPlot_add_code_begin(q,c);
    [c,okay,errtext] = BuildRoutineForPlot_add_code_end(q,c);
    if( ~okay )
        errtext = sprintf('%s_error: %s (BuildRoutineForPlot_edd_code)',mfilename,errtext);
    end

    % Datei schreiben
    okay = write_ascii_file(q.plot_m_file,c );
    if( ~okay )
      errtext = sprintf('%s_error: Datei: %s konnte nicht geschrieben werden',mfilename,q.plot_m_file);
      return
    end
    fprintf('Datei <%s> gebildet\n\n',q.plot_m_file)
  end
end
function cliste = BuildRoutineForPlot_plot_file_names(q)
  
  n = length(q.plot_config_names);
  cliste = cell(1,n);
  for i=1:n
    cliste{i} = [q.pre_name,q.plot_config_names{i}];
  end
end
function cliste = BuildRoutineForPlot_plot_names(q)
  
  n = length(q.plot_config_names);
  cliste = cell(1,n);
  for i=1:n
    cliste{i} = [q.plot_config_names{i}];
  end
%   s_files = suche_files_ext(pwd,'m');
%   cliste = {};
%   for i=1:length(s_files)
%     if( str_find_f(s_files(i).name,q.pre_name) == 1 )
%       i0     = length(q.pre_name)+1;
%       i1     = length(s_files(i).name);
%       cliste = cell_add(cliste,s_files(i).name(i0:i1));
%     end
%   end
end
function [c,okay,errtext] = BuildRoutineForPlot_config_names(q,c)
  okay    = 1;
  errtext = '';
  
  [ifound,ipos] = cell_find_f(c,'q.config_names','n');
  
  flag = 0;
  for i=1:length(ifound)
    if( str_find_f(c{ifound(i)},'=') > 0 )
      ic0 = ifound(i);
      i0  = str_find_f(c{ifound(i)},'{');
      if( i0 > 0 )
        [ic1,i1] = cell_find_nearest_from_ipos(c,ic0,i0,'}','for');
        flag = 1;
      end
      if( flag )
        break;       
      end
    end
  end
  if( flag )
    % erste Zeile erstellen
    tt = [c{ic0}(1:i0),' ''',q.pliste{1},''' ...'];
    % alten Zeilen löschen
    c = cell_cut(c,ic0,ic1);
    % erste Zeile einfügen
    c = cell_insert(c,ic0,tt);
    % weitere Module einfügen
    for i =2:length(q.pliste)
      tt = '';
      for j=1:i0-1
        tt = [tt,' '];
      end
      tt = [tt,', ''',q.pliste{i},''' ...'];
      c = cell_insert(c,ic0+i-1,tt);
    end
    tt = '';
    for j=1:i0-1
      tt = [tt,' '];
    end
    tt = [tt,'};'];
    c = cell_insert(c,ic0+length(q.pliste),tt);
    
  end
end        
function [c,okay,errtext] = BuildRoutineForPlot_switch(q,c)
  okay    = 1;
  errtext = '';
  
  [ifound,ipos] = cell_find_f(c,'switch plot_name','n');
  
  ic0 = ifound(1);
  i0  = ipos(1);
  [ic1,i1] = cell_find_nearest_from_ipos(c,ic0,i0,'end','for');
  
  ic0 = ic0 + 1;
  ic1 = ic1 - 1;
  % alten Zeilen löschen
  c = cell_cut(c,ic0,ic1);
  % neue Zeile erstellen
  cc = {};
  for i =1:length(q.pliste)
    tt = '';
    for j=1:i0-1+2
      tt = [tt,' '];
    end
    t1 = [tt,'case ''',q.pliste{i},''''];
    if( q.use_e_struct )
      t2 = [tt,'  q = ',q.fliste{i},'(plot_name,e,q);'];
    else
      t2 = [tt,'  q = ',q.fliste{i},'(plot_name,d,u,q);'];
    end
    cc = cell_add(cc,{t1,t2});
  end
  c = cell_insert(c,ic0,cc);    
end
function [c,okay,errtext] = BuildRoutineForPlot_add_code_begin(q,c)

  okay = 1;
  errtext = '';
  start_text = '#add_code_begin_start#';
  end_text   = '#add_code_begin_end#';
  
  i0     = cell_find_f(c,start_text,'n');
  i1     = cell_find_f(c,end_text,'n');
  
  if( isempty(i0) )
    errtext = sprintf('Das Code-Stück: <%s> konnte in Datei %s  nicht gefunden werden',start_text,q.plot_m_file);
    okay = 0;
    return;
  end
  if( isempty(i1) )
    errtext = sprintf('Das Code-Stück: <%s> konnte in Datei %s  nicht gefunden werden',end_text,q.plot_m_file);
    okay = 0;
    return;
  end
  c      = cell_delete(c,i0+1,i1-1);
  
  i2     = str_find_f(c{i0},' ','vn');
  
  leer_zeichen = '';
  for i=1:i2,leer_zeichen = [leer_zeichen,' '];end
  
  n  = length(q.add_code_begin);
  c1 = cell(1,n);
  for i=1:n
    c1{i} = [leer_zeichen,q.add_code_begin{i}];
  end
  
  c  = cell_insert(c,i0+1,c1);  
end
function [c,okay,errtext] = BuildRoutineForPlot_add_code_end(q,c)

  okay = 1;
  errtext = '';
  start_text = '#add_code_end_start#';
  end_text   = '#add_code_end_end#';
  
  i0     = cell_find_f(c,start_text,'n');
  i1     = cell_find_f(c,end_text,'n');
  
  if( isempty(i0) )
    errtext = sprintf('Das Code-Stück: <%s> konnte in Datei %s  nicht gefunden werden',start_text,q.plot_m_file);
    okay = 0;
    return;
  end
  if( isempty(i1) )
    errtext = sprintf('Das Code-Stück: <%s> konnte in Datei %s  nicht gefunden werden',end_text,q.plot_m_file);
    okay = 0;
    return;
  end
  c      = cell_delete(c,i0+1,i1-1);
  
  i2     = str_find_f(c{i0},' ','vn');
  
  leer_zeichen = '';
  for i=1:i2,leer_zeichen = [leer_zeichen,' '];end
  
  n  = length(q.add_code_end);
  c1 = cell(1,n);
  for i=1:n
    c1{i} = [leer_zeichen,q.add_code_end{i}];
  end
  
  c  = cell_insert(c,i0+1,c1);  
end
function [ okay,c,nc ] = BuildRoutineForPlot_buildmfile( plot_m_file , start_dir, use_e_struct, load_one_file, plot_in_one, add_plots)
  okay = 1;
  s_file = str_get_pfe_f(plot_m_file);
  
  if( use_e_struct )
    direct_flag   = sprintf('flag_%s_direct',s_file.body);
    messreadzeile = '  [e,q,meas_dir] = mess_plot_read_e_data(q);';
    isemptyzeile  = 'if( isempty(fieldnames(e)) )';
    ndatazeile    = 'q.n_data           = length(e);';
    structnempty  = 'if( ~isempty(e) )';
    blablazeile   = '        q = blabla(plot_name,e,q);';
    commentzeile  = '    ';
    tstartzeile   = '        [~,q.tmin,~] = e_data_get_tstart(e);';
    tendzeile     = '        [q.tmax,~,~] = e_data_get_tend(e);';
    reducezeile   = '      e = e_data_reduce_time(e,q.tmin,q.tmax,0);';
  else
    direct_flag   = sprintf('flag_%s_direct',s_file.body);
    messreadzeile = '  [d,u,h,q,meas_dir] = mess_plot_read_data(q);';
    isemptyzeile  = 'if( isempty(fieldnames(d)) )';
    ndatazeile    = 'q.n_data           = length(d);';
    structnempty  = 'if( ~isempty(d) )';
    blablazeile   = '        q = blabla(plot_name,d,u,q);';
    commentzeile  = '    fprintf(''comment:%s\n---------------------------------------------------\n'',h{i});';
    tstartzeile   = '        q.tmin = d.time(1);';
    tendzeile     = '        q.tmax = d.time(length(d.time));';
    reducezeile   = '      d = struct_reduce_vecs_to_tmin_tmax(d,q.tmin,q.tmax);';
  end
  
  if( add_plots )
    fig_num_text = 'q.fig_num        = get_max_figure_num;';
  else
    fig_num_text = 'q.fig_num        = 0;';
  end
  
  c = ...
  {'% Plotroutine' ...
  ,'  %#add_code_begin_start#' ...
  ,'  %#add_code_begin_end#' ...
  ,'' ...
  ,'okay = 0;' ...
  ,'%==========================================================================' ...
  ,sprintf('%% directes plotten mit %s = 1',direct_flag) ...
  ,'%==========================================================================' ...
  ,sprintf('if( ~exist(''%s'',''var'') )',direct_flag) ...
  ,sprintf('  %s = 0;',direct_flag) ...
  ,'end' ...
  ,sprintf('if( %s )',direct_flag) ...
  ,'  if( ~exist(''e'',''var'') )' ...
  ,sprintf('    error(''%s=1, but structure e does not exist'');',direct_flag) ...
  ,'  end' ...
  ,'end' ...
  ,'% old_mess_path sich merken' ...
  ,'q1 = [];' ...
  ,'if( exist(''q'',''var'') && isfield(q,''old_mess_path'') )' ...
  ,'  q1.old_mess_path = q.old_mess_path;' ...
  ,'end' ...
  ,'if( exist(''q'',''var'') && isfield(q,''auswahl_liste'') )' ...
  ,'  q1.auswahl_liste = q.auswahl_liste;' ...
  ,'end' ...
  ,'' ...
  ,'q = q1;' ...
  ,'clear q1' ...
  ,'' ...
  ,'q.use_start_dir  = 1;' ...
  ,'if( qlast_exist(1) )' ...
  ,'  q.start_dir      = qlast_get(1);' ...
  ,'else' ...
  ,sprintf('  q.start_dir      = ''%s'';',start_dir) ...
  ,'end' ...
  ,'' ...
  ,'q.config_names   = { '''' ...' ...
  ,'                   };' ...
  ,'q.tstart         = -1;         % Plotten' ...
  ,'q.tend           = -1.;' ...
  ,'q.tmin           = -1;        % Datensatz beschneiden' ...
  ,'q.tmax           = -1;' ...
  ,'' ...
  ,'q.x_sig_name     = ''time'';    % ''time'' oder ''displ'' auf x-Achse' ...
  ,'q.x_unit_name    = ''s'';       % ''s'' oder ''m'' auf x-Achse' ...
  ,'' ...
  ,'q.line_size      = 1;' ...
  ,'q.line_size_1    = 1.5;' ...
  ,'q.line_size_2    = 2;' ...
  ,'q.line_size_fett = 3;' ...
  ,'' ...
  ,sprintf(fig_num_text) ...
  ,'q.dina4          = 2;' ...
  ,'q.set_zaf        = 1;' ...
  ,'q.set_scm        = 1;' ...
  ,'q.set_chs        = 0;' ...
  ,'' ...  
  ,sprintf('q.plot_in_one    = %i;',plot_in_one) ...
  ,sprintf('q.load_one_file    = %i;',load_one_file) ...
  ,'' ...
  ,'' ...
  ,'q.mod_mess       = 0;       % = 0 Messvariablen nicht modifizieren' ...
  ,'                            % = 1 Messvariablen modifizieren' ...
  ,'' ...
  ,'' ...
  ,'' ...
  ,'%==========================================================================' ...
  ,'% Konfiguration festlegen' ...
  ,'%==========================================================================' ...
  ,sprintf('if( qlast_exist(''%s_config_plot_auswahl_liste'') )',s_file.name) ...
  ,sprintf('  q.auswahl_liste = qlast_get(''%s_config_plot_auswahl_liste'');',s_file.name) ...
  ,'else' ...
  ,'  q.auswahl_liste = q.config_names;' ...
  ,'end' ...
  ,sprintf('if( ~%s )',direct_flag) ...
  ,'  q.auswahl_liste = mess_plot_set_config(q.config_names,q.auswahl_liste);' ...
  ,sprintf('  qlast_set(''%s_config_plot_auswahl_liste'',q.auswahl_liste);',s_file.name) ...
  ,'end' ...
  ,'%===================================================================' ...
  ,'% Messung einladen' ...
  ,'%===================================================================' ...
  ,sprintf('if( ~%s )',direct_flag) ...
  ,messreadzeile ...
  ,'' ...
  ,'  if( ~isempty(meas_dir) )' ...
  ,'    qlast_set(1,meas_dir);' ...
  ,'  end' ...
  ,'end' ...
  ,isemptyzeile ...
  ,'  return' ...
  ,'end' ...
  ,ndatazeile ...
  ,'' ...
  ,'%===================================================================' ...
  ,'% Messung modifizieren' ...
  ,'%===================================================================' ...
  ,'if( q.mod_mess )' ...
  ,'  % Modifikation der Messung' ...
  ,'end' ...
  ,'%===================================================================' ...
  ,'% Messnamen extrahieren' ...
  ,'%===================================================================' ...
  ,'q.mess_name = cell(q.n_data);' ...
  ,'q.mess_dir  = cell(q.n_data);' ...
  ,'' ...
  ,'for i=1:q.n_data' ...
  ,'' ...
  ,sprintf('  if( ~%s )',direct_flag) ...  
  ,'    s_file = str_get_pfe_f(q.file_list{i});' ...
  ,'' ...
  ,'    q.mess_name{i} = s_file.name;' ...
  ,'    q.mess_dir{i}  = s_file.dir;' ...
  ,'  else' ...
  ,'    q.mess_name{i} = '''';' ...
  ,'    q.mess_dir{i}  = '''';' ...
  ,'  end' ...
  ,'end' ...
  ,'%===================================================================' ...
  ,'% Plot bearbeiten' ...
  ,'%===================================================================' ...
  ,structnempty ...
  ,'  %===================================================================' ...
  ,'  % Beschneidung der Messung' ...
  ,'  %===================================================================' ...
  ,'  if( q.tmin >= 0. || q.tmax >= 0. )' ...
  ,'      if( q.tmin < 0. )' ...
  ,tstartzeile ...
  ,'      end' ...
  ,'      if( q.tmax < 0. )' ...
  ,tendzeile ...
  ,'      end' ...
  ,reducezeile ...
  ,'  end' ...
  ,'' ...
  ,'  %=============================================' ...
  ,'  % Figure, die aus dem Zoom rausgenommen werden' ...
  ,'  % fig_num_spv = zeros(q.n_data,1);' ...
  ,'  %=============================================' ...
  ,'' ...
  ,'  %=============================' ...
  ,'  % Ausführen der Plots:' ...
  ,'  %=============================' ...
  ,'  n = length(q.auswahl_liste);' ...
  ,'  for in=1:n' ...
  ,'    plot_name = q.auswahl_liste{in};' ...
  ,'    switch plot_name' ...
  ,'      case ''blabla''' ...
  ,blablazeile ...
  ,'    end' ...
  ,'  end' ...
  ,'' ...
  ,'' ...
  ,'  if( q.set_zaf )' ...
  ,'      zaf(''set_silent'')' ...
  ,'      % Spurbild aus Zoomen rausnehmen' ...
  ,'%       for i=1:q.n_data' ...
  ,'%         if( fig_num_spv(i) )' ...
  ,'%           figure(fig_num_spv(i))' ...
  ,'%           zaf(''del_act'')' ...
  ,'%         end' ...
  ,'%       end' ...
  ,'  end' ...
  ,'  if( q.set_scm )' ...
  ,'    scm(''set_silent'')' ...
  ,'  end' ...
  ,'' ...
  ,'  figmen' ...
  ,sprintf('  if( ~%s )',direct_flag) ...
  ,'    for i=1:q.n_data' ...
  ,'      fprintf(''Messdatei<%s>\n'',q.mess_name{i})' ...
  ,commentzeile ...
  ,'    end' ...
  ,'  end' ...
  ,'' ...
  ,'  if( check_val_in_struct(q,''file_list'',''cell'',1) )' ...
  ,'    qlast_set(2,q.file_list);' ...
  ,'  end' ...
  ,'  %#add_code_end_start#' ...
  ,'  %#add_code_end_end#' ...
  ,'end' ...
  ,sprintf('clear %s',direct_flag) ...
  };
  nc = length(c);
end
function [ okay,c,nc ] = BuildRoutineForPlot_buildmfile_type2( plot_m_file , start_dir, use_e_struct, load_one_file, plot_in_one,add_plots)
  okay = 1;
  s_file = str_get_pfe_f(plot_m_file);
  
  if( use_e_struct )
    messheadzeile = sprintf('function q = %s(e,q)',s_file.body);
    messreadzeile = '  [e,q,meas_dir] = mess_plot_read_e_data(q);';
    isemptyzeile  = '  if( isempty(fieldnames(e)) )';
    ndatazeile    = '  q.n_data           = length(e);';
    structnempty  = '  if( ~isempty(e) )';
    blablazeile   = '        q = blabla(plot_name,e,q);';
    commentzeile  = '    ';
    reduce_zeile  = '        e = e_data_reduce_time(e,q.tmin,q.tmax,0);';
  else
    messreadzeile = '  [d,u,h,q,meas_dir] = mess_plot_read_data(q);';
    isemptyzeile  = '  if( isempty(fieldnames(d)) )';
    ndatazeile    = '  q.n_data           = length(d);';
    structnempty  = '  if( ~isempty(d) )';
    blablazeile   = '          q = blabla(plot_name,d,u,q);';
    commentzeile  = '      fprintf(''comment:%s\n---------------------------------------------------\n'',h{i});';
    reduce_zeile  = '        d = struct_reduce_vecs_to_tmin_tmax(d,q.tmin,q.tmax);';
  end
  
  if( add_plots )
    fig_num_text = 'q.fig_num        = get_max_figure_num;';
  else
    fig_num_text = 'q.fig_num        = 0;';
  end
  c = ...
  {messheadzeile ...
  ,'% Plotroutine' ...
  ,'  %#add_code_begin_start#' ...
  ,'  %#add_code_begin_end#' ...
  ,'' ...
  ,'  okay = 1;' ...
  ,'' ...
  ,'' ...
  ,'  q.config_names   = { '''' ...' ...
  ,'                     };' ...
  ,'  q.tstart         = -1;         % Plotten' ...
  ,'  q.tend           = -1.;' ...
  ,'  q.tmin           = -1;        % Datensatz beschneiden' ...
  ,'  q.tmax           = -1;' ...
  ,'' ...
  ,'  q.x_sig_name     = ''time'';    % ''time'' oder ''displ'' auf x-Achse' ...
  ,'  q.x_unit_name    = ''s'';       % ''s'' oder ''m'' auf x-Achse' ...
  ,'' ...
  ,'  q.line_size      = 2;' ...
  ,'  q.line_size_1    = 1.5;' ...
  ,'  q.line_size_2    = 1;' ...
  ,'  q.line_size_fett = 3;' ...
  ,'' ...
  ,sprintf(fig_num_text) ...
  ,'  q.dina4          = 2;' ...
  ,'  q.set_zaf        = 1;' ...
  ,'  q.set_scm        = 1;' ...
  ,'  q.set_chs        = 0;' ...
  ,'' ...  
  ,sprintf('  q.plot_in_one    = %i;',plot_in_one) ...
  ,sprintf('  q.load_one_file    = %i;',load_one_file) ...
  ,'' ...
  ,'' ...
  ,'  q.mod_mess       = 0;       % = 0 Messvariablen nicht modifizieren' ...
  ,'                            % = 1 Messvariablen modifizieren' ...
  ,'' ...
  ,'' ...
  ,'' ...
  ,'  %===================================================================' ...
  ,'  % Messung modifizieren' ...
  ,'  %===================================================================' ...
  ,'  if( q.mod_mess )' ...
  ,'    % Modifikation der Messung' ...
  ,'  end' ...
  ,'  %===================================================================' ...
  ,'  % Plot bearbeiten' ...
  ,'  %===================================================================' ...
  ,structnempty ...
  ,'    %===================================================================' ...
  ,'    % Beschneidung der Messung' ...
  ,'    %===================================================================' ...
  ,'    if( q.tmin >= 0. || q.tmax >= 0. )' ...
  ,'        if( q.tmin < 0. )' ...
  ,'          q.tmin = d.time(1);' ...
  ,'        end' ...
  ,'        if( q.tmax < 0. )' ...
  ,'          q.tmax = d.time(length(d.time));' ...
  ,'        end' ...
  ,reduce_zeile ...
  ,'    end' ...
  ,'' ...
  ,'    %=============================================' ...
  ,'    % Figure, die aus dem Zoom rausgenommen werden' ...
  ,'    % fig_num_spv = zeros(q.n_data,1);' ...
  ,'    %=============================================' ...
  ,'' ...
  ,'    %=============================' ...
  ,'    % Ausführen der Plots:' ...
  ,'    %=============================' ...
  ,'    n = length(q.config_names);' ...
  ,'    for in=1:n' ...
  ,'      plot_name = q.config_names{in};' ...
  ,'      switch plot_name' ...
  ,'        case ''blabla''' ...
  ,blablazeile ...
  ,'      end' ...
  ,'    end' ...
  ,'' ...
  ,'' ...
  ,'    if( q.set_zaf )' ...
  ,'        zaf(''set_silent'')' ...
  ,'        % Spurbild aus Zoomen rausnehmen' ...
  ,'%         for i=1:q.n_data' ...
  ,'%           if( fig_num_spv(i) )' ...
  ,'%             figure(fig_num_spv(i))' ...
  ,'%             zaf(''del_act'')' ...
  ,'%           end' ...
  ,'%         end' ...
  ,'    end' ...
  ,'    if( q.set_scm )' ...
  ,'      scm(''set_silent'')' ...
  ,'    end' ...
  ,'' ...
  ,'    figmen' ...
  ,'' ...
  ,'    %#add_code_end_start#' ...
  ,'    %#add_code_end_end#' ...
  ,'  end' ...
  ,'end' ...
  };
  nc = length(c);
end
  
  